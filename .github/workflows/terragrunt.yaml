name: 'Terragrunt'

on: workflow_dispatch

concurrency: ${{github.event.client_payload.event_name}}-${{github.event.client_payload.head_ref}}

jobs:
  prepare:
    name: 'Prepare'
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{secrets.GH_TOKEN}}

    steps:
      - name: Check if head branch exists
        id: head-branch-not-exists
        run: |
          if ! gh api \
              --silent \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{github.event.client_payload.repo}}/branches/${{github.event.client_payload.head_ref}}; then
              echo "head_branch_not_exists=true" >> $GITHUB_OUTPUT
              exit 1
          fi

      - name: Check if the review status of the PR is ready
        id: review-status-not-ready
        if: github.event.client_payload.event_name == 'pull_request_review'
        run: |
          owner="$(echo ${{github.event.client_payload.repo}} | cut -d '/' -f1)"
          repo="$(echo ${{github.event.client_payload.repo}} | cut -d '/' -f2)"

          state="$(curl -s -X POST -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/graphql -d '{ "query": "query { repository(owner:\"'"$owner"'\", name:\"'"$repo"'\") { pullRequest(number: ${{github.event.client_payload.pull_request_number}}) { reviewDecision } } }" }' | jq -Mr '.data.repository.pullRequest.reviewDecision')"

          if [[ "$state" != "APPROVED" ]]; then
            echo "The review status of the PR is not ready"
            echo "review_status_not_ready=true" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Set check context
        run: |
          if [[ ${{github.event.client_payload.event_name}} == 'pull_request' ]]; then
            check_context="Terragrunt Plan"
          else
            check_context="Terragrunt Apply"
          fi

          echo "CHECK_CONTEXT=$check_context" >> $GITHUB_ENV

      - name: Send pending status check
        run: |
          gh api \
            --silent \
            --method POST \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/${{github.event.client_payload.repo}}/statuses/${{github.event.client_payload.sha}} \
            -f state='pending' \
            -f target_url="https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}" \
            -f context="$CHECK_CONTEXT" \
            -f description='In progress'

          comments="$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{github.event.client_payload.repo}}/issues/${{github.event.client_payload.pull_request_number}}/comments)" && comment_id="$(echo $comments | jq -Mr '.[] | select(.body | startswith("[//]: <> (actions-comment)")) | .id' | head -n1)"

          if [[ -z "$comment_id" ]]; then
            method="POST"
            endpoint="https://api.github.com/repos/${{github.event.client_payload.repo}}/issues/${{github.event.client_payload.pull_request_number}}/comments"
          else
            method="PATCH"
            endpoint="https://api.github.com/repos/${{github.event.client_payload.repo}}/issues/comments/$comment_id"
          fi

          gh api \
            --silent \
            --method $method \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$endpoint" \
            -f body="[//]: <> (actions-comment)

          # Status
          
          ⌛️ [$CHECK_CONTEXT](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) is running."

      - name: Check if head branch name follows naming convention
        if: github.event.client_payload.event_name == 'pull_request'
        run: |
          if [[ ! "${{github.event.client_payload.head_ref}}" =~ ^ALBE-[0-9]+ ]]; then
            comments="$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{github.event.client_payload.repo}}/issues/${{github.event.client_payload.pull_request_number}}/comments)" && comment_id="$(echo $comments | jq -Mr '.[] | select(.body | startswith("[//]: <> (naming-comment)")) | .id' | head -n1)"

            if [[ -z "$comment_id" ]]; then
              gh api \
                --silent \
                --method POST \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/${{github.event.client_payload.repo}}/issues/${{github.event.client_payload.pull_request_number}}/comments \
                -f body="[//]: <> (naming-comment)

          # ⚠️ Warning
          
          Branch name (\`${{github.event.client_payload.head_ref}}\`) **does not follow naming convention**. It **must** start with a Jira ticket number (e.g. \`ALBE-1234\`)."
            fi
          else
            title="$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{github.event.client_payload.repo}}/pulls/${{github.event.client_payload.pull_request_number}} \
              --jq '.title')"
            
            if [[ ! "$title" =~ ^\[ALBE-[0-9]+\] ]]; then
              task="$(echo "${{github.event.client_payload.head_ref}}" | sed 's/^\(ALBE-[0-9]\+\).*/\1/')"
              title="[$task] $title"

              gh api \
                --method PATCH \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                /repos/${{github.event.client_payload.repo}}/pulls/${{github.event.client_payload.pull_request_number}} \
                -f title="$title"
            fi
          fi

      - name: Check if Plan has finished successfully
        if: github.event.client_payload.event_name == 'pull_request_review'
        run: |
          plan_state="$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            --jq '[.[] | select(.context == "Terragrunt Plan")] | .[0].state' \
            /repos/${{github.event.client_payload.repo}}/commits/${{github.event.client_payload.sha}}/statuses)"

          if [[ "$plan_state" != "success" ]]; then
            echo "Apply cannot be run because Plan has not finished successfully."
            exit 1
          fi

      - name: Checkout terragrunt-actions repo
        uses: actions/checkout@v3.1.0
        with:
          path: terragrunt-actions

      - name: Checkout terragrunt-gitops repo
        uses: actions/checkout@v3.1.0
        with:
          path: terragrunt-gitops
          repository: ${{github.event.client_payload.repo}}
          fetch-depth: 0
          token: ${{secrets.GH_TOKEN}}
          ref: ${{github.event.client_payload.head_ref}}

      - name: Collect Terragrunt changes
        id: collect-terragrunt
        run: |
          export CHANGED_AND_MODIFIED_FILES="${{github.event.client_payload.all_changed_and_modified_files}}"
          export OLD_NEW_RENAMED_FILES="${{github.event.client_payload.all_old_new_renamed_files}}"

          ./terragrunt-actions/_bin/actions/collect-terragrunt-changes.sh

    outputs:
      head_branch_not_exists: ${{steps.head-branch-not-exists.outputs.head_branch_not_exists}}
      review_status_not_ready: ${{steps.review-status-not-ready.outputs.review_status_not_ready}}
      terragrunt_workdirs_nofmt: ${{steps.collect-terragrunt.outputs.terragrunt_workdirs_nofmt}}
      terragrunt_workdirs: ${{steps.collect-terragrunt.outputs.terragrunt_workdirs}}
      terragrunt_deleted_dirs: ${{steps.collect-terragrunt.outputs.terragrunt_deleted_dirs}}
      terragrunt_tfstate_renamed_files: ${{steps.collect-terragrunt.outputs.terragrunt_tfstate_renamed_files}}

  infracost:
    name: 'Infracost'
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      needs.prepare.outputs.terragrunt_workdirs != '[]'
        && github.event.client_payload.event_name == 'pull_request'
    env:
      GITHUB_TOKEN: ${{secrets.GH_TOKEN}}

    steps:
      - name: Checkout terragrunt-actions repo
        uses: actions/checkout@v3.1.0
        with:
          path: terragrunt-actions

      - name: Checkout terragrunt-gitops repo
        uses: actions/checkout@v3.1.0
        with:
          path: terragrunt-gitops
          repository: ${{github.event.client_payload.repo}}
          fetch-depth: 0
          token: ${{secrets.GH_TOKEN}}
          ref: ${{github.event.client_payload.head_ref}}

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_ACCESS_SECRET_KEY}}
          aws-region: ${{vars.AWS_REGION}}
          
      - name: SSH private key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{secrets.SSH_PRIVATE_KEY}}

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{secrets.INFRACOST_API_KEY}}

      - name: Infracost
        run: |
          export TERRAGRUNT_WORKDIRS="${{needs.prepare.outputs.terragrunt_workdirs_nofmt}}"
          export HEAD_REF="${{github.event.client_payload.head_ref}}"
          export REPO="${{github.event.client_payload.repo}}"
          export PULL_REQUEST_NUMBER="${{github.event.client_payload.pull_request_number}}"

          ./terragrunt-actions/_bin/actions/run-infracost.sh

  rename:
    name: 'Rename'
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{needs.prepare.outputs.terragrunt_tfstate_renamed_files != ''}}

    steps:
      - name: Checkout terragrunt-actions repo
        uses: actions/checkout@v3.1.0
        with:
          path: terragrunt-actions

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_ACCESS_SECRET_KEY}}
          aws-region: ${{vars.AWS_REGION}}

      - name: Plan Rename
        if: github.event.client_payload.event_name == 'pull_request'
        run: |
          export TF_STATE_BUCKET="${{vars.TF_STATE_BUCKET}}"
          export TF_LOCKS_TABLE="${{vars.TF_LOCKS_TABLE}}"
          export TF_STATE_RENAMED_FILES="${{needs.prepare.outputs.terragrunt_tfstate_renamed_files}}"

          ./terragrunt-actions/_bin/actions/rename.sh plan-rename

      - name: Rename
        if: github.event.client_payload.event_name == 'pull_request_review'
        run: |
          export TF_STATE_BUCKET="${{vars.TF_STATE_BUCKET}}"
          export TF_LOCKS_TABLE="${{vars.TF_LOCKS_TABLE}}"
          export TF_STATE_RENAMED_FILES="${{needs.prepare.outputs.terragrunt_tfstate_renamed_files}}"

          ./terragrunt-actions/_bin/actions/rename.sh rename

  terragrunt-sync:
    name: 'Sync'
    runs-on: ubuntu-latest
    needs: [prepare, rename]
    if: |
      always()
        && needs.prepare.outputs.terragrunt_workdirs != '[]'
        && (needs.rename.result == 'success' || needs.rename.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        dir: ${{fromJson(needs.prepare.outputs.terragrunt_workdirs)}}

    env:
      GITHUB_TOKEN: ${{secrets.GH_TOKEN}}

    steps:
      - name: Enable branch lock
        if: github.event.client_payload.event_name == 'pull_request_review'
        run: |
          curl -sSL \
            -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{github.event.client_payload.repo}}/branches/${{github.event.client_payload.head_ref}}/protection \
            -d @- <<EOF
          {
              "required_status_checks": null,
              "enforce_admins": true,
              "required_pull_request_reviews": null,
              "restrictions": null,
              "lock_branch": true
          }
          EOF

      - name: Checkout terragrunt-actions repo
        uses: actions/checkout@v3.1.0
        with:
          path: terragrunt-actions

      - name: Checkout terragrunt-gitops repo
        uses: actions/checkout@v3.1.0
        with:
          path: terragrunt-gitops
          repository: ${{github.event.client_payload.repo}}
          token: ${{secrets.GH_TOKEN}}
          ref: ${{github.event.client_payload.head_ref}}
      
      - name: Setup Terragrunt
        run: ./terragrunt-actions/_bin/actions/setup-terragrunt.sh

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_ACCESS_SECRET_KEY}}
          aws-region: ${{vars.AWS_REGION}}

      - name: SSH private key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{secrets.SSH_PRIVATE_KEY}}

      - name: Terragrunt Validate
        if: github.event.client_payload.event_name == 'pull_request'
        run: |
          export TERRAGRUNT_WORKDIR="${{matrix.dir}}"

          ./terragrunt-actions/_bin/actions/run-terragrunt.sh validate

      - name: Terragrunt Plan
        id: terragrunt-plan
        if: github.event.client_payload.event_name == 'pull_request'
        run: |
          export TERRAGRUNT_WORKDIR="${{matrix.dir}}"

          ./terragrunt-actions/_bin/actions/run-terragrunt.sh plan
      
      - name: Terragrunt Plan Summary
        if: github.event.client_payload.event_name == 'pull_request'
        run: |
          export TERRAGRUNT_WORKDIR="${{matrix.dir}}"

          ./terragrunt-actions/_bin/actions/run-terragrunt.sh plan-summary

      - name: Terragrunt Apply
        id: terragrunt-apply
        if: github.event.client_payload.event_name == 'pull_request_review'
        run: |
          export TERRAGRUNT_WORKDIR="${{matrix.dir}}"

          ./terragrunt-actions/_bin/actions/run-terragrunt.sh apply

      - name: Export outputs
        id: out
        if: github.event.client_payload.event_name == 'pull_request'
        uses: cloudposse/github-action-matrix-outputs-write@0.4.1
        with:
          matrix-step-name: terragrunt
          matrix-key: ${{matrix.dir}}
          outputs: |-
            terragrunt_plan_create: ${{steps.terragrunt-plan.outputs.terragrunt_plan_create}}
            terragrunt_plan_delete: ${{steps.terragrunt-plan.outputs.terragrunt_plan_delete}}
            terragrunt_plan_update: ${{steps.terragrunt-plan.outputs.terragrunt_plan_update}}
            terragrunt_plan_replace: ${{steps.terragrunt-plan.outputs.terragrunt_plan_replace}}

  terragrunt-destroy:
    name: 'Destroy'
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{needs.prepare.outputs.terragrunt_deleted_dirs != '[]'}}
    strategy:
      fail-fast: false
      matrix:
        dir: ${{fromJson(needs.prepare.outputs.terragrunt_deleted_dirs)}}

    env:
      GITHUB_TOKEN: ${{secrets.GH_TOKEN}}

    steps:
      - name: Enable branch lock
        if: github.event.client_payload.event_name == 'pull_request_review'
        run: |
          curl -sSL \
            -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{github.event.client_payload.repo}}/branches/${{github.event.client_payload.head_ref}}/protection \
            -d @- <<EOF
          {
              "required_status_checks": null,
              "enforce_admins": true,
              "required_pull_request_reviews": null,
              "restrictions": null,
              "lock_branch": true
          }
          EOF

      - name: Checkout terragrunt-actions repo
        uses: actions/checkout@v3.1.0
        with:
          path: terragrunt-actions

      - name: Checkout terragrunt-gitops repo (main branch)
        uses: actions/checkout@v3.1.0
        with:
          path: terragrunt-gitops
          repository: ${{github.event.client_payload.repo}}
          token: ${{secrets.GH_TOKEN}}
          ref: 'main'
      
      - name: Setup Terragrunt
        run: ./terragrunt-actions/_bin/actions/setup-terragrunt.sh

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_ACCESS_SECRET_KEY}}
          aws-region: ${{env.AWS_REGION}}
          
      - name: SSH private key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{secrets.SSH_PRIVATE_KEY}}
      
      - name: Terragrunt Plan
        id: terragrunt-plan
        if: github.event.client_payload.event_name == 'pull_request'
        run: |
          export TERRAGRUNT_WORKDIR="${{matrix.dir}}"

          ./terragrunt-actions/_bin/actions/run-terragrunt.sh plan-destroy
      
      - name: Terragrunt Plan Summary
        if: github.event.client_payload.event_name == 'pull_request'
        run: |
          export TERRAGRUNT_WORKDIR="${{matrix.dir}}"

          ./terragrunt-actions/_bin/actions/run-terragrunt.sh plan-summary
      
      - name: Terragrunt Apply
        if: github.event.client_payload.event_name == 'pull_request_review'
        run: |
          export TERRAGRUNT_WORKDIR="${{matrix.dir}}"

          ./terragrunt-actions/_bin/actions/run-terragrunt.sh apply-destroy

      - name: Export outputs
        id: out
        if: github.event.client_payload.event_name == 'pull_request'
        uses: cloudposse/github-action-matrix-outputs-write@0.4.1
        with:
          matrix-step-name: terragrunt
          matrix-key: ${{matrix.dir}}
          outputs: |-
            terragrunt_plan_create: 0
            terragrunt_plan_delete: ${{steps.terragrunt-plan.outputs.terragrunt_plan_delete}}
            terragrunt_plan_update: 0
            terragrunt_plan_replace: 0

  finalize:
    name: 'Finalize'
    runs-on: ubuntu-latest
    needs: [prepare, rename, terragrunt-sync, terragrunt-destroy]
    if: ${{always()}}

    env:
      GITHUB_TOKEN: ${{secrets.GH_TOKEN}}

    steps:
      - name: Get matrix jobs outputs
        id: read
        if: github.event.client_payload.event_name == 'pull_request'
        uses: cloudposse/github-action-matrix-outputs-read@0.1.1
        with:
          matrix-step-name: terragrunt

      - name: Set check context
        run: |
          if [[ ${{github.event.client_payload.event_name}} == 'pull_request' ]]; then
            check_context="Terragrunt Plan"
          else
            check_context="Terragrunt Apply"
          fi

          echo "CHECK_CONTEXT=$check_context" >> $GITHUB_ENV

      - name: Set AWS credentials
      - name: Checkout terragrunt-actions repo
        uses: actions/checkout@v3.1.0
        with:
          path: terragrunt-actions
        if: |
          needs.prepare.outputs.terragrunt_tfstate_renamed_files != ''
            && github.event.client_payload.event_name == 'pull_request'
            && needs.rename.result == 'success'

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_ACCESS_SECRET_KEY}}
          aws-region: ${{vars.AWS_REGION}}
        if: |
          needs.prepare.outputs.terragrunt_tfstate_renamed_files != ''
            && github.event.client_payload.event_name == 'pull_request'
            && needs.rename.result == 'success'

      - name: Post Plan Rename
        if: |
          needs.prepare.outputs.terragrunt_tfstate_renamed_files != ''
            && github.event.client_payload.event_name == 'pull_request'
            && needs.rename.result == 'success'
        run: |
          export REPO="${{github.event.client_payload.repo}}"
          export TF_STATE_RENAMED_FILES="${{needs.prepare.outputs.terragrunt_tfstate_renamed_files}}"

          ./terragrunt-actions/_bin/actions/rename.sh post-plan-rename

      - name: Check job failure/cancellation
        id: check-job
        run: |
          printf "%s" "[//]: <> (actions-comment)

          # Status
          
          " > comment.md

          if [[ ${{needs.prepare.result}} == "success" ]] \
              && [[ ${{needs.terragrunt-sync.result}} == "success" || ${{needs.terragrunt-sync.result}} == "skipped" ]] \
              && [[ ${{needs.terragrunt-destroy.result}} == "success" || ${{needs.terragrunt-destroy.result}} == "skipped" ]] \
              && [[ ${{needs.rename.result}} == "success" || ${{needs.rename.result}} == "skipped" ]]; then
            echo "state=success" >> $GITHUB_OUTPUT
            state="success"

            printf "✅ [$CHECK_CONTEXT](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) has completed successfully.\n" >> comment.md

            if [[ ${{github.event.client_payload.event_name}} == 'pull_request' ]]; then
              description="Plan completed - Please, review it and approve the PR to apply the changes"

              if [[ -n "${{needs.prepare.outputs.terragrunt_tfstate_renamed_files}}" ]]; then
                printf "%s" "
          ## Renames

          | Old path | New path |
          | --- | --- |
          " >> comment.md
              fi

              for file in ${{needs.prepare.outputs.terragrunt_tfstate_renamed_files}}; do
                old_file="$(dirname $(echo $file | cut -d ',' -f1))"
                new_file="$(dirname $(echo $file | cut -d ',' -f2))"

                printf "| $old_file | $new_file |\n" >> comment.md
              done

              modified_dirs="$(echo '{"dirs": ${{needs.prepare.outputs.terragrunt_workdirs}}} {"dirs": ${{needs.prepare.outputs.terragrunt_deleted_dirs}}}' | jq -r '.dirs[]')"

              if [[ -n "$modified_dirs" ]]; then
                printf "%s" "
          ## Plan summary

          | | Path | Create | Update | Delete | Replace |
          | :-: | --- | :-: | :-: | :-: | :-: |
          " >> comment.md
              fi

              for dir in $modified_dirs; do
                plan=$(echo '${{steps.read.outputs.result}}' | jq ".[] |= .[\"$dir\"]")

                if [[ $(echo $plan | jq ".terragrunt_plan_delete") -gt 0 || $(echo $plan | jq ".terragrunt_plan_replace") -gt 0 ]]; then
                  symbol="⚠️"
                elif [[ $(echo $plan | jq ".terragrunt_plan_create") -gt 0 ]]; then
                  symbol="🆕"
                elif [[ $(echo $plan | jq ".terragrunt_plan_update") -gt 0 ]]; then
                  symbol="🔄"
                else
                  symbol="🆗"
                fi

                printf "| $symbol | $dir |" >> comment.md

                for op in create update delete replace; do
                  printf " $(echo $plan | jq ".terragrunt_plan_$op") |" >> comment.md
                done

                printf "\n" >> comment.md
              done

              printf "\n" >> comment.md

              printf "[**🧐 Review and approve changes**](https://github.com/${{github.event.client_payload.repo}}/pull/${{github.event.client_payload.pull_request_number}}/files)\n" >> comment.md
            else
              description="Apply completed"
            fi
          elif [[ -n "${{needs.prepare.outputs.head_branch_not_exists}}" || -n "${{needs.prepare.outputs.review_status_not_ready}}" ]]; then
            exit 1
          else
            echo "state=failure" >> $GITHUB_OUTPUT
            state="failure"

            echo "❌ [$CHECK_CONTEXT](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) has failed." >> comment.md

            if [[ ${{github.event.client_payload.event_name}} == 'pull_request' ]]; then
              description="Plan failed - Please, review the logs"
            else
              description="Apply failed - Please, review the logs"
            fi
          fi

          gh api \
            --silent \
            --method POST \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/${{github.event.client_payload.repo}}/statuses/${{github.event.client_payload.sha}} \
            -f state="$state" \
            -f target_url="https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}" \
            -f context="$CHECK_CONTEXT" \
            -f description="$description"
          
          comments="$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{github.event.client_payload.repo}}/issues/${{github.event.client_payload.pull_request_number}}/comments)" && comment_id="$(echo $comments | jq -Mr '.[] | select(.body | startswith("[//]: <> (actions-comment)")) | .id') | head -n1"

          if [[ -z "$comment_id" ]]; then
            method="POST"
            endpoint="https://api.github.com/repos/${{github.event.client_payload.repo}}/issues/${{github.event.client_payload.pull_request_number}}/comments"
          else
            method="PATCH"
            endpoint="https://api.github.com/repos/${{github.event.client_payload.repo}}/issues/comments/$comment_id"
          fi

          gh api \
            --silent \
            --method $method \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$endpoint" \
            -F "body=@comment.md"

      - name: Disable branch lock
        if: github.event.client_payload.event_name == 'pull_request_review'
        run: |
          gh api \
            --silent \
            --method DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{github.event.client_payload.repo}}/branches/${{github.event.client_payload.head_ref}}/protection || exit 0

      - name: Enable auto-merge
        run: |
          if [[ ${{steps.check-job.outputs.state}} == "success" && ${{github.event.client_payload.event_name}} == "pull_request_review" ]]; then
            gh pr --repo ${{github.event.client_payload.repo}} merge --auto --squash ${{github.event.client_payload.pull_request_number}}
          fi
